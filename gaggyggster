local r = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local h = game.Workspace.SecureParts.AdminPads:FindFirstChild("Touch to get admin"):FindFirstChild("Head")
if r and h then
    for i = 1, 10 do
        r.CFrame = h.CFrame
        wait(0.1) -- Adjust the delay as needed
    end
end
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local _1 = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local Color = Instance.new("TextButton")
local UICorner_3 = Instance.new("UICorner")
local BumAll = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local bighead = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local la = Instance.new("TextButton")
local UICorner_6 = Instance.new("UICorner")
local SpamDecal = Instance.new("TextButton")
local UICorner_7 = Instance.new("UICorner")
local TextBox = Instance.new("TextBox")
local UICorner_8 = Instance.new("UICorner")
local Skybox = Instance.new("TextButton")
local UICorner_9 = Instance.new("UICorner")
local TextBox_2 = Instance.new("TextBox")
local UICorner_10 = Instance.new("UICorner")
local F = Instance.new("TextButton")
local UICorner_11 = Instance.new("UICorner")
local RT = Instance.new("TextButton")
local UICorner_12 = Instance.new("UICorner")
local Welcome = Instance.new("TextLabel")
local UICorner_13 = Instance.new("UICorner")
local _2 = Instance.new("Frame")
local UICorner_14 = Instance.new("UICorner")
local Thomas = Instance.new("TextButton")
local UICorner_15 = Instance.new("UICorner")
local KAS = Instance.new("TextButton")
local UICorner_16 = Instance.new("UICorner")
local bu = Instance.new("TextButton")
local UICorner_17 = Instance.new("UICorner")
local button = Instance.new("TextButton")
local UICorner_18 = Instance.new("UICorner")
local Booall = Instance.new("TextButton")
local UICorner_19 = Instance.new("UICorner")
local Unanchor = Instance.new("TextButton")
local UICorner_20 = Instance.new("UICorner")
local fires = Instance.new("TextButton")
local UICorner_21 = Instance.new("UICorner")
local BASEPLATE = Instance.new("TextButton")
local UICorner_22 = Instance.new("UICorner")
local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")

-- Properties

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.new(0.552941, 0.552941, 0.552941)
Frame.BorderColor3 = Color3.new(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.105263174, 0, 0.528252125, 0)
Frame.Size = UDim2.new(0, 406, 0, 219)

UICorner.Parent = Frame

_1.Name = "1"
_1.Parent = Frame
_1.BackgroundColor3 = Color3.new(0.454902, 0.454902, 0.454902)
_1.BorderColor3 = Color3.new(0, 0, 0)
_1.BorderSizePixel = 0
_1.Position = UDim2.new(0.0221674871, 0, 0.183537439, 0)
_1.Size = UDim2.new(0, 388, 0, 173)

UICorner_2.Parent = _1

Color.Name = "Color"
Color.Parent = _1
Color.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
Color.BorderColor3 = Color3.new(0, 0, 0)
Color.BorderSizePixel = 0
Color.Position = UDim2.new(0.0506957546, 0, 0.199269906, 0)
Color.Size = UDim2.new(0, 55, 0, 26)
Color.Font = Enum.Font.SourceSans
Color.Text = "Color All"
Color.TextColor3 = Color3.new(0, 0, 0)
Color.TextSize = 14

UICorner_3.Parent = Color

BumAll.Name = "BumAll"
BumAll.Parent = _1
BumAll.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
BumAll.BorderColor3 = Color3.new(0, 0, 0)
BumAll.BorderSizePixel = 0
BumAll.Position = UDim2.new(0.424407095, 0, 0.199269906, 0)
BumAll.Size = UDim2.new(0, 55, 0, 26)
BumAll.Font = Enum.Font.SourceSans
BumAll.Text = "BumAll"
BumAll.TextColor3 = Color3.new(0, 0, 0)
BumAll.TextSize = 14

UICorner_4.Parent = BumAll

bighead.Name = "bighead"
bighead.Parent = _1
bighead.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
bighead.BorderColor3 = Color3.new(0, 0, 0)
bighead.BorderSizePixel = 0
bighead.Position = UDim2.new(0.798118353, 0, 0.199269906, 0)
bighead.Size = UDim2.new(0, 55, 0, 26)
bighead.Font = Enum.Font.SourceSans
bighead.Text = "Big Head"
bighead.TextColor3 = Color3.new(0, 0, 0)
bighead.TextSize = 14

UICorner_5.Parent = bighead

la.Name = "la"
la.Parent = _1
la.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
la.BorderColor3 = Color3.new(0, 0, 0)
la.BorderSizePixel = 0
la.Position = UDim2.new(0.857396781, 0, 0.84666878, 0)
la.Size = UDim2.new(0, 55, 0, 26)
la.Font = Enum.Font.SourceSans
la.Text = ">"
la.TextColor3 = Color3.new(0, 0, 0)
la.TextSize = 14

UICorner_6.Parent = la

SpamDecal.Name = "SpamDecal"
SpamDecal.Parent = _1
SpamDecal.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
SpamDecal.BorderColor3 = Color3.new(0, 0, 0)
SpamDecal.BorderSizePixel = 0
SpamDecal.Position = UDim2.new(0.0481184348, 0, 0.41892308, 0)
SpamDecal.Size = UDim2.new(0, 55, 0, 47)
SpamDecal.Font = Enum.Font.SourceSans
SpamDecal.Text = "Decal Spam"
SpamDecal.TextColor3 = Color3.new(0, 0, 0)
SpamDecal.TextSize = 14

UICorner_7.Parent = SpamDecal

TextBox.Parent = SpamDecal
TextBox.BackgroundColor3 = Color3.new(0.705882, 0.705882, 0.705882)
TextBox.BorderColor3 = Color3.new(0, 0, 0)
TextBox.BorderSizePixel = 0
TextBox.Position = UDim2.new(1.24985957, 0, 0.176763654, 0)
TextBox.Size = UDim2.new(0, 179, 0, 30)
TextBox.Font = Enum.Font.SourceSansBold
TextBox.PlaceholderColor3 = Color3.new(0.807843, 0.807843, 0.807843)
TextBox.PlaceholderText = "Enter Decal ID"
TextBox.Text = ""
TextBox.TextColor3 = Color3.new(0, 0, 0)
TextBox.TextScaled = true
TextBox.TextSize = 14
TextBox.TextWrapped = true

UICorner_8.Parent = TextBox

Skybox.Name = "Skybox"
Skybox.Parent = _1
Skybox.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
Skybox.BorderColor3 = Color3.new(0, 0, 0)
Skybox.BorderSizePixel = 0
Skybox.Position = UDim2.new(0.0481184348, 0, 0.725281477, 0)
Skybox.Size = UDim2.new(0, 55, 0, 47)
Skybox.Font = Enum.Font.SourceSans
Skybox.Text = "Sky"
Skybox.TextColor3 = Color3.new(0, 0, 0)
Skybox.TextSize = 14
Skybox.TextWrapped = true

UICorner_9.Parent = Skybox

TextBox_2.Parent = Skybox
TextBox_2.BackgroundColor3 = Color3.new(0.705882, 0.705882, 0.705882)
TextBox_2.BorderColor3 = Color3.new(0, 0, 0)
TextBox_2.BorderSizePixel = 0
TextBox_2.Position = UDim2.new(1.24985957, 0, 0.176763654, 0)
TextBox_2.Size = UDim2.new(0, 179, 0, 30)
TextBox_2.Font = Enum.Font.SourceSansBold
TextBox_2.PlaceholderColor3 = Color3.new(0.807843, 0.807843, 0.807843)
TextBox_2.PlaceholderText = "Enter Decal ID"
TextBox_2.Text = ""
TextBox_2.TextColor3 = Color3.new(0, 0, 0)
TextBox_2.TextScaled = true
TextBox_2.TextSize = 14
TextBox_2.TextWrapped = true

UICorner_10.Parent = TextBox_2

F.Name = "F"
F.Parent = _1
F.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
F.BorderColor3 = Color3.new(0, 0, 0)
F.BorderSizePixel = 0
F.Position = UDim2.new(0.798118412, 0, 0.41892308, 0)
F.Size = UDim2.new(0, 55, 0, 26)
F.Font = Enum.Font.SourceSans
F.Text = "FireAll"
F.TextColor3 = Color3.new(0, 0, 0)
F.TextSize = 14

UICorner_11.Parent = F

RT.Name = "RT"
RT.Parent = _1
RT.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
RT.BorderColor3 = Color3.new(0, 0, 0)
RT.BorderSizePixel = 0
RT.Position = UDim2.new(0.803273082, 0, 0.638576269, 0)
RT.Size = UDim2.new(0, 55, 0, 26)
RT.Font = Enum.Font.SourceSans
RT.Text = "RainToads"
RT.TextColor3 = Color3.new(0, 0, 0)
RT.TextSize = 14

UICorner_12.Parent = RT

Welcome.Name = "Welcome"
Welcome.Parent = Frame
Welcome.BackgroundColor3 = Color3.new(0.74902, 0.74902, 0.74902)
Welcome.BorderColor3 = Color3.new(0.654902, 0.654902, 0.654902)
Welcome.BorderSizePixel = 0
Welcome.Position = UDim2.new(0.070615612, 0, 0.0748663098, 0)
Welcome.Size = UDim2.new(0, 346, 0, 20)
Welcome.Font = Enum.Font.SourceSans
Welcome.Text = "Gaggy's Hub"
Welcome.TextColor3 = Color3.new(0, 0, 0)
Welcome.TextScaled = true
Welcome.TextSize = 14
Welcome.TextWrapped = true

UICorner_13.Parent = Welcome

_2.Name = "2"
_2.Parent = Frame
_2.BackgroundColor3 = Color3.new(0.454902, 0.454902, 0.454902)
_2.BorderColor3 = Color3.new(0, 0, 0)
_2.BorderSizePixel = 0
_2.Position = UDim2.new(0.0221674871, 0, 0.183537439, 0)
_2.Size = UDim2.new(0, 388, 0, 173)
_2.Visible = false

UICorner_14.Parent = _2

Thomas.Name = "Thomas"
Thomas.Parent = _2
Thomas.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
Thomas.BorderColor3 = Color3.new(0, 0, 0)
Thomas.BorderSizePixel = 0
Thomas.Position = UDim2.new(0.0506956764, 0, 0.048980888, 0)
Thomas.Size = UDim2.new(0, 55, 0, 26)
Thomas.Font = Enum.Font.SourceSans
Thomas.Text = "Become Thomas"
Thomas.TextColor3 = Color3.new(0, 0, 0)
Thomas.TextScaled = true
Thomas.TextSize = 14
Thomas.TextWrapped = true

UICorner_15.Parent = Thomas

KAS.Name = "KAS"
KAS.Parent = _2
KAS.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
KAS.BorderColor3 = Color3.new(0, 0, 0)
KAS.BorderSizePixel = 0
KAS.Position = UDim2.new(0.424407005, 0, 0.048980888, 0)
KAS.Size = UDim2.new(0, 55, 0, 26)
KAS.Font = Enum.Font.SourceSans
KAS.Text = "Kill all"
KAS.TextColor3 = Color3.new(0, 0, 0)
KAS.TextSize = 14

UICorner_16.Parent = KAS

bu.Name = "bu"
bu.Parent = _2
bu.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
bu.BorderColor3 = Color3.new(0, 0, 0)
bu.BorderSizePixel = 0
bu.Position = UDim2.new(0.857396781, 0, 0.84666878, 0)
bu.Size = UDim2.new(0, 55, 0, 26)
bu.Font = Enum.Font.SourceSans
bu.Text = ">"
bu.TextColor3 = Color3.new(0, 0, 0)
bu.TextSize = 14

UICorner_17.Parent = bu

button.Name = "button"
button.Parent = _2
button.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
button.BorderColor3 = Color3.new(0, 0, 0)
button.BorderSizePixel = 0
button.Position = UDim2.new(-0.000850716839, 0, 0.84666878, 0)
button.Size = UDim2.new(0, 55, 0, 26)
button.Font = Enum.Font.SourceSans
button.Text = "<"
button.TextColor3 = Color3.new(0, 0, 0)
button.TextSize = 14

UICorner_18.Parent = button

Booall.Name = "Boo all"
Booall.Parent = _2
Booall.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
Booall.BorderColor3 = Color3.new(0, 0, 0)
Booall.BorderSizePixel = 0
Booall.Position = UDim2.new(0.424407005, 0, 0.34955892, 0)
Booall.Size = UDim2.new(0, 55, 0, 26)
Booall.Font = Enum.Font.SourceSans
Booall.Text = "Personality.."
Booall.TextColor3 = Color3.new(0, 0, 0)
Booall.TextScaled = true
Booall.TextSize = 14
Booall.TextWrapped = true

UICorner_19.Parent = Booall

Unanchor.Name = "Unanchor"
Unanchor.Parent = _2
Unanchor.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
Unanchor.BorderColor3 = Color3.new(0, 0, 0)
Unanchor.BorderSizePixel = 0
Unanchor.Position = UDim2.new(0.0506956764, 0, 0.34955892, 0)
Unanchor.Size = UDim2.new(0, 55, 0, 26)
Unanchor.Font = Enum.Font.SourceSans
Unanchor.Text = "Unanchor"
Unanchor.TextColor3 = Color3.new(0, 0, 0)
Unanchor.TextSize = 14

UICorner_20.Parent = Unanchor

fires.Name = "fires"
fires.Parent = _2
fires.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
fires.BorderColor3 = Color3.new(0, 0, 0)
fires.BorderSizePixel = 0
fires.Position = UDim2.new(0.42698434, 0, 0.638576269, 0)
fires.Size = UDim2.new(0, 55, 0, 26)
fires.Font = Enum.Font.SourceSans
fires.Text = "Fire"
fires.TextColor3 = Color3.new(0, 0, 0)
fires.TextSize = 14

UICorner_21.Parent = fires

BASEPLATE.Name = "BASEPLATE"
BASEPLATE.Parent = _2
BASEPLATE.BackgroundColor3 = Color3.new(0.709804, 0.709804, 0.709804)
BASEPLATE.BorderColor3 = Color3.new(0, 0, 0)
BASEPLATE.BorderSizePixel = 0
BASEPLATE.Position = UDim2.new(0.0506956764, 0, 0.638576269, 0)
BASEPLATE.Size = UDim2.new(0, 55, 0, 26)
BASEPLATE.Font = Enum.Font.SourceSans
BASEPLATE.Text = "Make Baseplate"
BASEPLATE.TextColor3 = Color3.new(0, 0, 0)
BASEPLATE.TextScaled = true
BASEPLATE.TextSize = 14
BASEPLATE.TextWrapped = true

UICorner_22.Parent = BASEPLATE

UIAspectRatioConstraint.Parent = ScreenGui
UIAspectRatioConstraint.AspectRatio = 1.6994328498840332

-- Scripts

local function IDZNBFB_fake_script() -- Color.LocalScript 
	local script = Instance.new('LocalScript', Color)

	local function C_c()
		script.Parent.MouseButton1Down:Connect(function()
			--rgrg
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			function randomise()
				for i,v in game.Workspace:GetDescendants() do
					if v:IsA("BasePart") then
						spawn(function()
							SetLocked(v,false)
							Color(v,Color3.new(math.random(0,255),math.random(0,255),math.random(0,255)))
						end)
					end
				end
			end
			while wait() do
				spawn(function()
					randomise()
				end)
			end
		end)
	
	
	end;
	task.spawn(C_c);
end
coroutine.wrap(IDZNBFB_fake_script)()
local function IWWZUE_fake_script() -- BumAll.LocalScript 
	local script = Instance.new('LocalScript', BumAll)

	local function C_9()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			function Bum(player)
				char = player.Character
				for i,v in char:GetChildren() do
					pcall(function()
						SetLocked(v,false)
					end)
				end
				if player.Character:FindFirstChild("Part1") then
					return
				else
	
					SetAnchor(true,player.Character.HumanoidRootPart)
					spawn(function()
						CreatePart(player.Character:WaitForChild("Right Leg").CFrame * CFrame.new(0,1,0.6),player.Character)
						SetName(player.Character.Part,"Part1")
						CreatePart(player.Character:WaitForChild("Left Leg").CFrame * CFrame.new(0,1,0.6),player.Character)
						SetName(player.Character.Part,"Part2")
					end)
					wait(0.2)
					repeat wait() until char:FindFirstChild("Part2")
					spawn(function()
						AddMesh(char.Part1)
						AddMesh(char.Part2)
						SetMesh(char.Part1,"5697933202")
						SetMesh(char.Part2,"5697933202")
					end)
					wait(0.2)
					repeat wait() until char.Part2:FindFirstChild("Mesh")
					spawn(function()
						MeshResize(char.Part1,Vector3.new(0.5,0.5,0.5))
						MeshResize(char.Part2,Vector3.new(0.5,0.5,0.5))
					end)
					wait(0.2)
					pcall(function()
						Color(char.Part1,char:WaitForChild("Right Leg").Color)
						Color(char.Part2,char:WaitForChild("Left Leg").Color)
					end)
					wait(0.2)
					spawn(function()
						SetCollision(player.Character.Part1,false)
						SetCollision(player.Character.Part2,false)
						Weld(char.Part1,char.HumanoidRootPart,char.Part1)
						Weld(char.Part2,char.Part1,char.Part2)
					end)
					repeat wait() until char.Part2:FindFirstChild("BTWeld")
					spawn(function()
						SetAnchor(false,char.HumanoidRootPart)
						SetAnchor(false,char.Part1)
						SetAnchor(false,char.Part2)
					end)
					repeat wait()
						SetAnchor(false,char.HumanoidRootPart)
						SetAnchor(false,char.Part1)
						SetAnchor(false,char.Part2)
					until char.Part2.Anchored == false
				end
			end
			for i,v in game.Players:GetPlayers() do
				--zzspawn(function()
				pcall(function()
					Bum(v)
				end)
				--end)
			end
		end)
	
	end;
	task.spawn(C_9);
	
end
coroutine.wrap(IWWZUE_fake_script)()
local function NIFMI_fake_script() -- bighead.LocalScript 
	local script = Instance.new('LocalScript', bighead)

	local function C_6()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
	
			function BigHead(player)
				local chara = player.Character
				spawn(function()
					SetLocked(chara.Head,false)
					MeshResize(chara.Head,Vector3.new(10,10,10))
				end)
			end
			for i,players in game.Players:GetPlayers() do
				BigHead(players)
			end
		end)
	
	end;
	task.spawn(C_6);
end
coroutine.wrap(NIFMI_fake_script)()
local function KYCDXB_fake_script() -- la.LocalScript 
	local script = Instance.new('LocalScript', la)

	local button = script.Parent
	local frame1 = script.Parent.Parent.Parent:FindFirstChild("1")
	local frame2 = script.Parent.Parent.Parent:FindFirstChild("2")
	
	if button and frame1 and frame2 then
		button.MouseButton1Click:Connect(function()
			if frame1.Visible then
				frame1.Visible = false
				frame2.Visible = true
			end
		end)
	end
	
end
coroutine.wrap(KYCDXB_fake_script)()
local function RHVCL_fake_script() -- SpamDecal.LocalScript 
	local script = Instance.new('LocalScript', SpamDecal)

	local function C_f()
		local ERER
	
		script.Parent.TextBox.FocusLost:Connect(function()
			ERER = script.Parent.TextBox.Text
		end)
	
		script.Parent.MouseButton1Down:Connect(function()
			--rgrg
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			function SpawnDecal(part,side)
				local args = {
					[1] = "CreateTextures",
					[2] = {
						[1] = {
							["Part"] = part,
							["Face"] = side,
							["TextureType"] = "Decal"
						}
					}
				}
	
				_(args)
			end
			function AddDecal(part,asset,side)
				local args = {
					[1] = "SyncTexture",
					[2] = {
						[1] = {
							["Part"] = part,
							["Face"] = side,
							["TextureType"] = "Decal",
							["Texture"] = "rbxassetid://".. asset
						}
					}
				}
				_(args)
			end
	
			function spam(id)
				for i,v in game.workspace:GetDescendants() do
					if v:IsA("BasePart") then
						spawn(function()
							SetLocked(v,false)
							SpawnDecal(v,Enum.NormalId.Front)
							AddDecal(v,id,Enum.NormalId.Front)
	
							SpawnDecal(v,Enum.NormalId.Back)
							AddDecal(v,id,Enum.NormalId.Back)
	
							SpawnDecal(v,Enum.NormalId.Right)
							AddDecal(v,id,Enum.NormalId.Right)
	
							SpawnDecal(v,Enum.NormalId.Left)
							AddDecal(v,id,Enum.NormalId.Left)
	
							SpawnDecal(v,Enum.NormalId.Bottom)
							AddDecal(v,id,Enum.NormalId.Bottom)
	
							SpawnDecal(v,Enum.NormalId.Top)
							AddDecal(v,id,Enum.NormalId.Top)
						end)
					end
				end 
			end
			spam(ERER)
		end)
	
		coroutine.wrap(ZYJPOKE_fake_script)()
		local function IGAFG_fake_script() -- Duckify.LocalScript 
			local script = Instance.new('LocalScript', Duckify)
	
			script.Parent.MouseButton1Click:Connect(function()
				--rgrg
				local player = game.Players.LocalPlayer
				local chara = player.Character
				local tool
				for i,v in player:GetDescendants() do
					if v.Name == "SyncAPI" then
						tool = v.Parent
					end
				end
				for i,v in game.ReplicatedStorage:GetDescendants() do
					if v.Name == "SyncAPI" then
						tool = v.Parent
					end
				end
				--craaa
				remote = tool.SyncAPI.ServerEndpoint
				function _(args)
					remote:InvokeServer(unpack(args))
				end
				function SetCollision(part,boolean)
					local args = {
						[1] = "SyncCollision",
						[2] = {
							[1] = {
								["Part"] = part,
								["CanCollide"] = boolean
							}
						}
					}
					_(args)
				end
				function SetAnchor(boolean,part)
					local args = {
						[1] = "SyncAnchor",
						[2] = {
							[1] = {
								["Part"] = part,
								["Anchored"] = boolean
							}
						}
					}
					_(args)
				end
				function CreatePart(cf,parent)
					local args = {
						[1] = "CreatePart",
						[2] = "Normal",
						[3] = cf,
						[4] = parent
					}
					_(args)
				end
				function DestroyPart(part)
					local args = {
						[1] = "Remove",
						[2] = {
							[1] = workspace.Part
						}
					}
					_(args)
				end
				function MovePart(part,cf)
					local args = {
						[1] = "SyncMove",
						[2] = {
							[1] = {
								["Part"] = part,
								["CFrame"] = cf
							}
						}
					}
					_(args)
				end
				function Resize(part,size,cf)
					local args = {
						[1] = "SyncResize",
						[2] = {
							[1] = {
								["Part"] = part,
								["CFrame"] = cf,
								["Size"] = size
							}
						}
					}
					_(args)
				end
				function AddMesh(part)
					local args = {
						[1] = "CreateMeshes",
						[2] = {
							[1] = {
								["Part"] = part
							}
						}
					}
					_(args)
				end
	
				function SetMesh(part,meshid)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["MeshId"] = "rbxassetid://"..meshid
							}
						}
					}
					_(args)
				end
				function SetTexture(part, texid)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["TextureId"] = "rbxassetid://"..texid
							}
						}
					}
					_(args)
				end
				function SetName(part, stringg)
					local args = {
						[1] = "SetName",
						[2] = {
							[1] = part,
						},
						[3] = stringg
					}
	
					_(args)
				end
				function MeshResize(part,size)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["Scale"] = size
							}
						}
					}
					_(args)
				end
				function Weld(part1, part2,lead)
					local args = {
						[1] = "CreateWelds",
						[2] = {
							[1] = part1,
							[2] = part2
						},
						[3] = lead
					}
					_(args)
	
				end
				function SetLocked(part,boolean)
					local args = {
						[1] = "SetLocked",
						[2] = {
							[1] = part
						},
						[3] = boolean
					}
					_(args)
				end
				function SetTrans(part,int)
					local args = {
						[1] = "SyncMaterial",
						[2] = {
							[1] = {
								["Part"] = part,
								["Transparency"] = int
							}
						}
					}
					_(args)
				end
				function CreateSpotlight(part)
					local args = {
						[1] = "CreateLights",
						[2] = {
							[1] = {
								["Part"] = workspace.Part,
								["LightType"] = "SpotLight"
							}
						}
					}
					_(args)
				end
				function SyncLighting(part,brightness)
					local args = {
						[1] = "SyncLighting",
						[2] = {
							[1] = {
								["Part"] = part,
								["LightType"] = "SpotLight",
								["Brightness"] = brightness
							}
						}
					}
					_(args)
				end
				function Duckify(player)
					for i,v in player.Character:GetDescendants() do
						if v:IsA("BasePart") then
							pcall(function()
								SetLocked(v,false)
								SetTrans(v,1)
							end)
						end
					end
					char = player.Character
					--spawn(function()
					spawn(function()
						SetAnchor(true,char.HumanoidRootPart)
						CreatePart(char.HumanoidRootPart.CFrame,char)
						SetCollision(char.Part,false)
						SetName(char.Part, "Duck")
					end)
					repeat wait() until char:FindFirstChild("Duck")
					spawn(function()
						SetLocked(char.Duck,false)
						SetLocked(char.HumanoidRootPart,false)
						Weld(char.Duck,char.HumanoidRootPart,char.Duck)
						SetAnchor(false,char.Duck)
						AddMesh(char.Duck)
					end)
					repeat wait() until char.Duck:FindFirstChild("Mesh")
					MeshResize(char.Duck,Vector3.new(8,8,8))
					SetMesh(char.Duck,"10749878672")
					SetTexture(char.Duck,"10749878886")
					SetAnchor(false,char.HumanoidRootPart)
					--end)
				end
				for i,v in game.Players:GetPlayers() do
					--spawn(function()
					Duckify(v)
					--end)
				end
			end)
		end
	end;
	task.spawn(C_f);
end
coroutine.wrap(RHVCL_fake_script)()
local function ZLVZ_fake_script() -- Skybox.LocalScript 
	local script = Instance.new('LocalScript', Skybox)

	local function C_27()
		local ERER
	
		script.Parent.TextBox.FocusLost:Connect(function()
			ERER = script.Parent.TextBox.Text
		end)
	
		script.Parent.MouseButton1Down:Connect(function()
			--rgrg
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			function SpawnDecal(part,side)
				local args = {
					[1] = "CreateTextures",
					[2] = {
						[1] = {
							["Part"] = part,
							["Face"] = side,
							["TextureType"] = "Decal"
						}
					}
				}
	
				_(args)
			end
			function AddDecal(part,asset,side)
				local args = {
					[1] = "SyncTexture",
					[2] = {
						[1] = {
							["Part"] = part,
							["Face"] = side,
							["TextureType"] = "Decal",
							["Texture"] = "rbxassetid://".. asset
						}
					}
				}
				_(args)
			end
	
			function Sky(id)
				e = char.HumanoidRootPart.CFrame.x
				f = char.HumanoidRootPart.CFrame.y
				g = char.HumanoidRootPart.CFrame.z
				CreatePart(CFrame.new(math.floor(e),math.floor(f),math.floor(g)) + Vector3.new(0,6,0),workspace)
				for i,v in game.Workspace:GetDescendants() do
					if v:IsA("BasePart") and v.CFrame.x == math.floor(e) and v.CFrame.z == math.floor(g) then
						--spawn(function()
						SetName(v,"Sky")
						AddMesh(v)
						--end)
						--spawn(function()
						SetMesh(v,"8006679977")
						SetTexture(v,id)
						--end)
						MeshResize(v,Vector3.new(50,50,50))
						SetLocked(v,true)
					end
				end
			end
			Sky(ERER)
	
		end)
	end;
	task.spawn(C_27);
end
coroutine.wrap(ZLVZ_fake_script)()
local function FOSRMVU_fake_script() -- F.LocalScript 
	local script = Instance.new('LocalScript', F)

	local function C_12()
		script.Parent.MouseButton1Down:Connect(function()
			--rgrg
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = workspace.Part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function AddFire(part)
				local args = {
					[1] = "CreateDecorations",
					[2] = {
						[1] = {
							["Part"] = part,
							["DecorationType"] = "Fire"
						}
					}
				}
				_(args)
			end
	
			function Fire(player)
				for i,v in player.Character:GetDescendants() do
					if v:IsA("BasePart") then
						AddFire(v)
					end
				end
				DestroyPart(player.Character.Head)
			end
	
			for i,v in game.Players:GetPlayers() do
				spawn(function()
					pcall(function()
						Fire(v)
					end)
				end)
			end
		end)
	
		coroutine.wrap(YTBL_fake_script)()
		local function YNEKD_fake_script() -- Luigirain.LocalScript 
			local script = Instance.new('LocalScript', Luigirain)
	
			script.Parent.MouseButton1Click:Connect(function()
				--rgrg
				local player = game.Players.LocalPlayer
				local char = player.Character
				local tool
				for i,v in player:GetDescendants() do
					if v.Name == "SyncAPI" then
						tool = v.Parent
					end
				end
				for i,v in game.ReplicatedStorage:GetDescendants() do
					if v.Name == "SyncAPI" then
						tool = v.Parent
					end
				end
				--craaa
				remote = tool.SyncAPI.ServerEndpoint
				function _(args)
					remote:InvokeServer(unpack(args))
				end
				function SetCollision(part,boolean)
					local args = {
						[1] = "SyncCollision",
						[2] = {
							[1] = {
								["Part"] = part,
								["CanCollide"] = boolean
							}
						}
					}
					_(args)
				end
				function SetAnchor(boolean,part)
					local args = {
						[1] = "SyncAnchor",
						[2] = {
							[1] = {
								["Part"] = part,
								["Anchored"] = boolean
							}
						}
					}
					_(args)
				end
				function CreatePart(cf)
					local args = {
						[1] = "CreatePart",
						[2] = "Normal",
						[3] = cf,
						[4] = workspace
					}
					_(args)
				end
				function DestroyPart(part)
					local args = {
						[1] = "Remove",
						[2] = {
							[1] = workspace.Part
						}
					}
					_(args)
				end
				function MovePart(part,cf)
					local args = {
						[1] = "SyncMove",
						[2] = {
							[1] = {
								["Part"] = part,
								["CFrame"] = cf
							}
						}
					}
					_(args)
				end
				function Resize(part,size,cf)
					local args = {
						[1] = "SyncResize",
						[2] = {
							[1] = {
								["Part"] = part,
								["CFrame"] = cf,
								["Size"] = size
							}
						}
					}
					_(args)
				end
				function AddMesh(part)
					local args = {
						[1] = "CreateMeshes",
						[2] = {
							[1] = {
								["Part"] = part
							}
						}
					}
					_(args)
				end
	
				function SetMesh(part,meshid)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["MeshId"] = "rbxassetid://"..meshid
							}
						}
					}
					_(args)
				end
				function SetTexture(part, texid)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["TextureId"] = "rbxassetid://"..texid
							}
						}
					}
					_(args)
				end
				function SetName(part, stringg)
					local args = {
						[1] = "SetName",
						[2] = {
							[1] = workspace.Part
						},
						[3] = stringg
					}
	
					_(args)
				end
				function MeshResize(part,size)
					local args = {
						[1] = "SyncMesh",
						[2] = {
							[1] = {
								["Part"] = part,
								["Scale"] = size
							}
						}
					}
					_(args)
				end
				hrpcf = player.Character.HumanoidRootPart.CFrame
				while wait(0.5) do
					x = hrpcf.x
					z = hrpcf.z
					randint = math.random(-600,600)
					randint2 = math.random(-600,600)
					xloc = randint + x
					zloc = randint2 + z
					cf = player.Character.HumanoidRootPart.CFrame.y + 400
					spawn(function()
						CreatePart(CFrame.new(math.floor(xloc), math.random(cf,cf+400), math.floor(zloc)))
						for i,v in game.Workspace:GetDescendants() do
							if v.Name == "Part" and v.Parent == workspace and v.CFrame.x == math.floor(xloc) and v.CFrame.z == math.floor(zloc) then
								SetName(v,"b_1337")
								SetAnchor(false,v)
								AddMesh(v)
								Resize(v, Vector3.new(100,100,100),v.CFrame)
								MeshResize(v,Vector3.new(20,20,20))
								SetMesh(v,"1618237875")
								SetTexture(v, "1618237897")
								SetCollision(v,false)
							else
							end
						end
					end)
				end
			end)
		end
	
	end;
	task.spawn(C_12);
end
coroutine.wrap(FOSRMVU_fake_script)()
local function QCSM_fake_script() -- RT.LocalScript 
	local script = Instance.new('LocalScript', RT)

	local function C_15()
		script.Parent.MouseButton1Down:Connect(function()
			--rgrg
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = workspace
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
					[1] = workspace.Part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			hrpcf = player.Character.HumanoidRootPart.CFrame
			while wait(0.5) do
				x = hrpcf.x
				z = hrpcf.z
				randint = math.random(-600,600)
				randint2 = math.random(-600,600)
				xloc = randint + x
				zloc = randint2 + z
				cf = player.Character.HumanoidRootPart.CFrame.y + 400
				spawn(function()
					CreatePart(CFrame.new(math.floor(xloc), math.random(cf,cf+400), math.floor(zloc)))
					for i,v in game.Workspace:GetDescendants() do
						if v.Name == "Part" and v.Parent == workspace and v.CFrame.x == math.floor(xloc) and v.CFrame.z == math.floor(zloc) then
							SetName(v,"b_1337")
							SetAnchor(false,v)
							AddMesh(v)
							Resize(v, Vector3.new(100,100,100),v.CFrame)
							MeshResize(v,Vector3.new(3,3,3))
							SetMesh(v,"614605299")
							SetTexture(v, "614605300")
							SetCollision(v,false)
						else
						end
					end	
				end)
			end
		end)
	end;
	task.spawn(C_15);
end
coroutine.wrap(QCSM_fake_script)()
local function NWSUQN_fake_script() -- Welcome.RainbowText 
	local script = Instance.new('Script', Welcome)

	local text = script.Parent
	local add = 10
	local colors = {
		{0, 0, 0},   -- black
		{1, 0, 0},   -- red
		{1, 1, 0},   -- yellow
		{1, 1, 1},   -- white
		{0, 1, 1},   -- aqua
		{0, 0, 1},   -- blue
		{1, 0, 1},   -- magenta
	}
	
	while true do
		for i = 1, #colors - 1 do
			local from = colors[i]
			local to = colors[i + 1]
	
			for k = 1, 255, add do
				local r = from[1] + (to[1] - from[1]) * k / 255
				local g = from[2] + (to[2] - from[2]) * k / 255
				local b = from[3] + (to[3] - from[3]) * k / 255
				text.TextColor3 = Color3.new(r, g, b)
				wait()
			end
		end
	end
	
end
coroutine.wrap(NWSUQN_fake_script)()
local function GDNBN_fake_script() -- Thomas.LocalScript 
	local script = Instance.new('LocalScript', Thomas)

	local function C_18()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Thomas(player)
				SetAnchor(true,char.HumanoidRootPart)
				CreatePart(char.HumanoidRootPart.CFrame,char)
				SetCollision(char.Part,false)
				SetLocked(char.Part,false)
				CreateSpotlight(char.Part)
				SyncLighting(char.Part,100)
				SetLocked(char.HumanoidRootPart,false)
				Weld(char.Part,char.HumanoidRootPart,char.Part)
				SetAnchor(false,char.Part)
				AddMesh(char.Part)
				MeshResize(char.Part,Vector3.new(3,3,3))
				SetMesh(char.Part,"4340968808")
				SetTexture(char.Part,"4340968918")
				SetAnchor(false,char.HumanoidRootPart)
				char.Humanoid.WalkSpeed = 100
				char.HumanoidRootPart.Touched:connect(function(obj)
					if obj.Parent:FindFirstChild("Humanoid") then
						SetLocked(obj.Parent.Head,false)
						DestroyPart(obj.Parent.Head)
					end
				end)
				game:GetService("RunService").RenderStepped:Connect(function()
					for i,v in char:GetDescendants() do
						if v:IsA("BasePart") then
							char.Humanoid.WalkSpeed = 100
							v.CanCollide = false
						end
					end
				end)
			end
			Thomas(player)
	
		end)
	end;
	task.spawn(C_18);
end
coroutine.wrap(GDNBN_fake_script)()
local function BVRGV_fake_script() -- KAS.LocalScript 
	local script = Instance.new('LocalScript', KAS)

	local function C_21()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
	
			function KillAll()
				for i,v in game.Players:GetPlayers() do
					spawn(function()
						SetLocked(v.Character.Head,false)
						DestroyPart(v.Character.Head)
					end)
				end
			end
			KillAll()
		end)
	end;
	task.spawn(C_21);
end
coroutine.wrap(BVRGV_fake_script)()
local function SBEZDS_fake_script() -- bu.LocalScript 
	local script = Instance.new('LocalScript', bu)

	print("Hello world!")
	
end
coroutine.wrap(SBEZDS_fake_script)()
local function TMIW_fake_script() -- button.LocalScript 
	local script = Instance.new('LocalScript', button)

	--gaggy
	
	local button = script.Parent
	local frame1 = script.Parent.Parent.Parent:FindFirstChild("1")
	local frame2 = script.Parent.Parent.Parent:FindFirstChild("2")
	
	if button and frame1 and frame2 then
		local isVisible = true 
	
		button.MouseButton1Click:Connect(function()
			isVisible = not isVisible 
	
			frame1.Visible = isVisible
			frame2.Visible = not isVisible
		end)
	end
	
end
coroutine.wrap(TMIW_fake_script)()
local function NYPASAA_fake_script() -- Booall.LocalScript 
	local script = Instance.new('LocalScript', Booall)

	local function C_24()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			function Boob(player)
				char = player.Character
				for i,v in char:GetChildren() do
					pcall(function()
						SetLocked(v,false)
					end)
				end
				if player.Character:FindFirstChild("Boob2") then
					return
				else
	
					SetAnchor(true,player.Character.HumanoidRootPart)
					spawn(function()
						CreatePart(player.Character:WaitForChild("Right Leg").CFrame * CFrame.new(0,2,-0.6),player.Character)
						SetName(player.Character.Part,"Boob1")
						CreatePart(player.Character:WaitForChild("Left Leg").CFrame * CFrame.new(0,2,-0.6),player.Character)
						SetName(player.Character.Part,"Boob2")
					end)
					wait(0.2)
					repeat wait() until char:FindFirstChild("Boob2")
					spawn(function()
						AddMesh(char.Boob1)
						AddMesh(char.Boob2)
						SetMesh(char.Boob1,"5697933202")
						SetMesh(char.Boob2,"5697933202")
					end)
					wait(0.2)
					repeat wait() until char.Boob2:FindFirstChild("Mesh")
					MeshResize(char.Boob1,Vector3.new(0.4,0.4,0.4))
					MeshResize(char.Boob2,Vector3.new(0.4,0.4,0.4))
					pcall(function()
						Color(char.Boob1,char:WaitForChild("Torso").Color)
						Color(char.Boob2,char:WaitForChild("Torso").Color)
					end)
					wait(0.2)
					spawn(function()
						SetCollision(player.Character.Boob1,false)
						SetCollision(player.Character.Boob2,false)
						Weld(char.Boob1,char.HumanoidRootPart,char.Boob1)
						Weld(char.Boob2,char.Boob1,char.Boob2)
					end)
					repeat wait() until char.Boob2:FindFirstChild("BTWeld")
					for i,v in char:GetChildren() do
						pcall(function()
							SetLocked(v,false)
						end)
					end
					for i,v in char:GetChildren() do
						pcall(function()
							SetAnchor(false,v)
						end)
					end
					spawn(function()
						SetAnchor(false,char.HumanoidRootPart)
						SetAnchor(false,char.Boob1)
						SetAnchor(false,char.Boob2)
					end)
				end
			end
			for i,v in game.Players:GetPlayers() do
				--spawn(function()
				pcall(function()
					Boob(v)
				end)
				--end)
			end
	
		end)
	end;
	task.spawn(C_24);
end
coroutine.wrap(NYPASAA_fake_script)()
local function MUMV_fake_script() -- Unanchor.LocalScript 
	local script = Instance.new('LocalScript', Unanchor)

	local function C_1b()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
	
			function Unanchor()
				for i,v in game.Workspace:GetDescendants() do
					spawn(function()
						SetLocked(v,false)
						SetAnchor(false,v)
					end)
				end
			end
			Unanchor()
	
		end)
	end;
	task.spawn(C_1b);
end
coroutine.wrap(MUMV_fake_script)()
local function ZZAX_fake_script() -- fires.LocalScript 
	local script = Instance.new('LocalScript', fires)

	local function C_33()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in player:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent)
				local args = {
					[1] = "CreatePart",
					[2] = "Normal",
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
			function AddFire(part)
				local args = {
					[1] = "CreateDecorations",
					[2] = {
						[1] = {
							["Part"] = part,
							["DecorationType"] = "Fire"
						}
					}
				}
				_(args)
			end
			function FireParts()
				for i,v in game.Workspace:GetDescendants() do
					spawn(function()
						SetLocked(v,false)
						AddFire(v)
					end)
				end
			end
			FireParts()
	
		end)
	end;
	task.spawn(C_33);
end
coroutine.wrap(ZZAX_fake_script)()
local function GGJJZ_fake_script() -- BASEPLATE.LocalScript 
	local script = Instance.new('LocalScript', BASEPLATE)

	local function C_1e()
		script.Parent.MouseButton1Down:Connect(function()
			local player = game.Players.LocalPlayer
			local char = player.Character
			local tool
			for i,v in game.ReplicatedStorage:GetDescendants() do
				if v.Name == "SyncAPI" then
					tool = v.Parent
				end
			end
			--craaa
			remote = tool.SyncAPI.ServerEndpoint
			function _(args)
				remote:InvokeServer(unpack(args))
			end
			function SetCollision(part,boolean)
				local args = {
					[1] = "SyncCollision",
					[2] = {
						[1] = {
							["Part"] = part,
							["CanCollide"] = boolean
						}
					}
				}
				_(args)
			end
			function SetAnchor(boolean,part)
				local args = {
					[1] = "SyncAnchor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Anchored"] = boolean
						}
					}
				}
				_(args)
			end
			function CreatePart(cf,parent,types)
				local args = {
					[1] = "CreatePart",
					[2] = types,
					[3] = cf,
					[4] = parent
				}
				_(args)
			end
			function DestroyPart(part)
				local args = {
					[1] = "Remove",
					[2] = {
						[1] = part
					}
				}
				_(args)
			end
			function MovePart(part,cf)
				local args = {
					[1] = "SyncMove",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf
						}
					}
				}
				_(args)
			end
			function Resize(part,size,cf)
				local args = {
					[1] = "SyncResize",
					[2] = {
						[1] = {
							["Part"] = part,
							["CFrame"] = cf,
							["Size"] = size
						}
					}
				}
				_(args)
			end
			function AddMesh(part)
				local args = {
					[1] = "CreateMeshes",
					[2] = {
						[1] = {
							["Part"] = part
						}
					}
				}
				_(args)
			end
	
			function SetMesh(part,meshid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["MeshId"] = "rbxassetid://"..meshid
						}
					}
				}
				_(args)
			end
			function SetTexture(part, texid)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["TextureId"] = "rbxassetid://"..texid
						}
					}
				}
				_(args)
			end
			function SetName(part, stringg)
				local args = {
					[1] = "SetName",
					[2] = {
						[1] = workspace.Part
					},
					[3] = stringg
				}
	
				_(args)
			end
			function MeshResize(part,size)
				local args = {
					[1] = "SyncMesh",
					[2] = {
						[1] = {
							["Part"] = part,
							["Scale"] = size
						}
					}
				}
				_(args)
			end
			function Weld(part1, part2,lead)
				local args = {
					[1] = "CreateWelds",
					[2] = {
						[1] = part1,
						[2] = part2
					},
					[3] = lead
				}
				_(args)
	
			end
			function SetLocked(part,boolean)
				local args = {
					[1] = "SetLocked",
					[2] = {
						[1] = part
					},
					[3] = boolean
				}
				_(args)
			end
			function SetTrans(part,int)
				local args = {
					[1] = "SyncMaterial",
					[2] = {
						[1] = {
							["Part"] = part,
							["Transparency"] = int
						}
					}
				}
				_(args)
			end
			function CreateSpotlight(part)
				local args = {
					[1] = "CreateLights",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight"
						}
					}
				}
				_(args)
			end
			function SyncLighting(part,brightness)
				local args = {
					[1] = "SyncLighting",
					[2] = {
						[1] = {
							["Part"] = part,
							["LightType"] = "SpotLight",
							["Brightness"] = brightness
						}
					}
				}
				_(args)
			end
	
			function Material(part,mate)
	
				local args = {
					[1] = "SyncMaterial player.Character
			local tool",
					[2] = {
						[1] = {
							["Part"] = part,
							["Material"] = mate
						}
					}
				}
				_(args)
			end
			function Color(part,color)
				local args = {
					[1] = "SyncColor",
					[2] = {
						[1] = {
							["Part"] = part,
							["Color"] = color --[[Color3]],
							["UnionColoring"] = false
						}
					}
				}
				_(args)
			end
			hrpx = math.floor(char.HumanoidRootPart.CFrame.x)
			hrpz = math.floor(char.HumanoidRootPart.CFrame.z)
			hrpy = math.floor(char.HumanoidRootPart.CFrame.y)
			function SpawnBasePlate()
				CreatePart(CFrame.new(hrpx,hrpy-20,hrpz),workspace,"Spawn")
				for i,v in game.Workspace:GetChildren() do
					if v:IsA("BasePart") and v.CFrame.y == hrpy - 20 and v.CFrame.x == hrpx then
						spawn(function()
							Resize(v,Vector3.new(1000,22,1000),CFrame.new(hrpx,hrpy-20,hrpz))
							Material(v,Enum.Material.Grass)
							Color(v,Color3.fromRGB(25,100,25))
							while wait(1) do
								pcall(function()SetLocked(v,true)end)
							end
						end)
					end
				end
			end
			SpawnBasePlate()
		end)
	end;
	task.spawn(C_1e);
end
coroutine.wrap(GGJJZ_fake_script)()
local function VZQR_fake_script() -- Frame.DragScript 
	local script = Instance.new('LocalScript', Frame)

	
	local UIS = game:GetService('UserInputService')
	local frame = script.Parent
	local dragToggle = nil
	local dragSpeed = 0.25
	local dragStart = nil
	local startPos = nil
	
	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end
	
	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	
	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
	
end
coroutine.wrap(VZQR_fake_script)()
